{"version":3,"sources":["../../scripts/main.js"],"names":["requirejs","hexHandler","highlightColor","fileChooser","document","getElementById","hexView","utfView","legend","fileLabel","btnScrollUp","btnScrollDown","btnChunkUp","btnChunkDown","rows","cols","numBytes","currRow","maxRow","highlitSpan","undefined","highlight","spanId","substr","style","backgroundColor","generateSpans","numSpans","separator","breakEvery","idNumbering","spans","i","generateHexArray","data","Array","prototype","map","call","datum","hexArray","toString","toUpperCase","generateUtfArray","String","fromCharCode","apply","replace","split","legendGen","startingRow","counter","resizeWindows","width","innerHTML","updateViews","hexIter","Symbol","iterator","utfIter","next","value","disabled","gen","updateData","getBytes","then","initialize","addEventListener","file","files","setFile","textContent","name","Math","ceil","size","error","console","log","event","target","id"],"mappings":";;AAAAA,UAAU,CAAC,eAAD,CAAV,EAA6B,UAAUC,UAAV,EAAsB;AAC/C;;AACA,QAAMC,iBAAiB,QAAvB;;AAEA,QAAMC,cAAcC,SAASC,cAAT,CAAwB,aAAxB,CAApB;AACA,QAAMC,UAAUF,SAASC,cAAT,CAAwB,SAAxB,CAAhB;AACA,QAAME,UAAUH,SAASC,cAAT,CAAwB,SAAxB,CAAhB;AACA,QAAMG,SAASJ,SAASC,cAAT,CAAwB,QAAxB,CAAf;AACA,QAAMI,YAAYL,SAASC,cAAT,CAAwB,WAAxB,CAAlB;;AAEA,QAAMK,cAAcN,SAASC,cAAT,CAAwB,UAAxB,CAApB;AACA,QAAMM,gBAAgBP,SAASC,cAAT,CAAwB,YAAxB,CAAtB;AACA,QAAMO,aAAaR,SAASC,cAAT,CAAwB,SAAxB,CAAnB;AACA,QAAMQ,eAAeT,SAASC,cAAT,CAAwB,WAAxB,CAArB;;AAEA,QAAIS,OAAO,EAAX;AACA,QAAIC,OAAO,EAAX;AACA,QAAIC,WAAWF,OAAOC,IAAtB;;AAEA,QAAIE,UAAU,CAAd;AACA,QAAIC,SAAS,CAAb;;AAEA,QAAIC,cAAcC,SAAlB;;AAEA,QAAMC,YAAY,SAASA,SAAT,CAAmBC,MAAnB,EAA2B;AACzCA,iBAASA,OAAOC,MAAP,CAAc,CAAd,CAAT;;AAEA,YAAIJ,gBAAgBC,SAApB,EAA+B;AAC3BhB,qBAASC,cAAT,CAAwB,MAAMc,WAA9B,EAA2CK,KAA3C,CAAiDC,eAAjD,GAAmEnB,QAAQkB,KAAR,CAAcC,eAAjF;AACH;;AAED,YAAIN,gBAAgBC,SAApB,EAA+B;AAC3BhB,qBAASC,cAAT,CAAwB,MAAMc,WAA9B,EAA2CK,KAA3C,CAAiDC,eAAjD,GAAmElB,QAAQiB,KAAR,CAAcC,eAAjF;AACH;;AAEDrB,iBAASC,cAAT,CAAwB,MAAMiB,MAA9B,EAAsCE,KAAtC,CAA4CC,eAA5C,GAA8DvB,cAA9D;AACAE,iBAASC,cAAT,CAAwB,MAAMiB,MAA9B,EAAsCE,KAAtC,CAA4CC,eAA5C,GAA8DvB,cAA9D;;AAEAiB,sBAAcG,MAAd;AACH,KAfD;;AAiBA,QAAMI,gBAAgB,SAASA,aAAT,CAAuBC,QAAvB,EAGgD;AAAA,YAFzBC,SAEyB,uEAFb,EAEa;AAAA,YADzBC,UACyB,uEADZ,CAAC,CACW;AAAA,YAAzBC,WAAyB,uEAAXV,SAAW;;AAClE,YAAIW,QAAQ,EAAZ;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,KAAKL,QAArB,EAA+BK,GAA/B,EAAoC;AAChCD,qBAAS,OAAT;;AAEA,gBAAID,gBAAgBV,SAApB,EAA+B;AAC3BW,oCAAiBD,WAAjB,GAA+BE,CAA/B;AACH;AACDD,qBAAS,UAAT;;AAEA;AACA;AACA,gBAAIF,aAAa,CAAb,IAAmBG,IAAIH,UAAJ,KAAmB,CAA1C,EAA8C;AAC1CE,yBAAS,MAAT;AACH,aAFD,MAEO;AAAE;AACLA,yBAASH,SAAT;AACH;AACJ;;AAED,eAAOG,KAAP;AACH,KAvBD;;AAyBA,QAAME,mBAAmB,SAASA,gBAAT,CAA0BC,IAA1B,EAAgC;AACrD,eAAOC,MAAMC,SAAN,CAAgBC,GAAhB,CAAoBC,IAApB,CAAyBJ,IAAzB,EAA+B,UAAUK,KAAV,EAAiB;AACnD,gBAAIC,WAAWD,MACVE,QADU,CACD,EADC,EAEVC,WAFU,EAAf;;AAIA,gBAAIH,QAAQ,EAAZ,EAAgB;AACZC,2BAAW,MAAMA,QAAjB;AACH;;AAED,mBAAOA,QAAP;AACH,SAVM,CAAP;AAWH,KAZD;;AAcA,QAAMG,mBAAmB,SAASA,gBAAT,CAA0BT,IAA1B,EAAgC;AACrD;AACA,eAAOU,OAAOC,YAAP,CAAoBC,KAApB,CAA0B,IAA1B,EAAgCZ,IAAhC,EACFa,OADE,CACM,yBADN,EACiC,GADjC,EAEFC,KAFE,CAEI,EAFJ,CAAP;AAGH,KALD;;AAOA,QAAMC,oCAAY,SAAUA,SAAV,CAAoBC,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AACVC,+BADU,GACAD,WADA;;AAAA;AAAA,6BAGR,IAHQ;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAIJC,YAAYpC,IAJR;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAUkC,SAAV;AAAA,KAAZ,CAAN;;AAQA,QAAMG,gBAAgB,SAASA,aAAT,GAAyB;AAC3C;AACA9C,gBAAQkB,KAAR,CAAc6B,KAAd,GAAyBtC,OAAO,CAAhC;AACAR,gBAAQiB,KAAR,CAAc6B,KAAd,GAAyBtC,IAAzB;;AAEAT,gBAAQgD,SAAR,GAAoB5B,cAAcV,QAAd,EAAwB,GAAxB,EAA6BD,IAA7B,EAAmC,GAAnC,CAApB;AACAR,gBAAQ+C,SAAR,GAAoB5B,cAAcV,QAAd,EAAwB,EAAxB,EAA4BD,IAA5B,EAAkC,GAAlC,CAApB;AACH,KAPD;;AASA,QAAMwC,cAAc,SAASA,WAAT,CAAqBrB,IAArB,EAA2B;AAC3C,YAAMsB,UAAUvB,iBAAiBC,IAAjB,EAAuBuB,OAAOC,QAA9B,GAAhB;AACA,YAAMC,UAAUhB,iBAAiBT,IAAjB,EAAuBuB,OAAOC,QAA9B,GAAhB;;AAEA;AACApD,gBAAQgD,SAAR,GAAoBhD,QAAQgD,SAAR,CAAkBP,OAAlB,CAA0B,sBAA1B,EAAkD;AAAA,4BAAWS,QAAQI,IAAR,GAAeC,KAAf,IAAwB,EAAnC;AAAA,SAAlD,CAApB;;AAEA;AACAtD,gBAAQ+C,SAAR,GAAoB/C,QAAQ+C,SAAR,CAAkBP,OAAlB,CAA0B,UAA1B,EAAsC;AAAA,4BAAWY,QAAQC,IAAR,GAAeC,KAAf,IAAwB,EAAnC;AAAA,SAAtC,CAApB;;AAEA;AACA,YAAG5C,YAAYC,MAAf,EAAuB;AACnBP,0BAAcmD,QAAd,GAAyB,IAAzB;AACAjD,yBAAaiD,QAAb,GAAwB,IAAxB;AACH,SAHD,MAGO;AACHnD,0BAAcmD,QAAd,GAAyB,KAAzB;AACAjD,yBAAaiD,QAAb,GAAwB,KAAxB;AACH;;AAED,YAAG7C,YAAY,CAAf,EAAkB;AACdP,wBAAYoD,QAAZ,GAAuB,IAAvB;AACAlD,uBAAWkD,QAAX,GAAsB,IAAtB;AACH,SAHD,MAGO;AACHpD,wBAAYoD,QAAZ,GAAuB,KAAvB;AACAlD,uBAAWkD,QAAX,GAAsB,KAAtB;AACH;;AAED;AACA,YAAMC,MAAMd,UAAUhC,OAAV,CAAZ;AACAT,eAAO8C,SAAP,GAAmB5B,cAAcZ,IAAd,EAAoB,EAApB,EAAwB,CAAxB,EAA2B,KAA3B,EACdiC,OADc,CACN,OADM,EACG;AAAA,yBAAUgB,IAAIH,IAAJ,GAAWC,KAArB;AAAA,SADH,CAAnB;AAEH,KA/BD;;AAiCA,QAAMG,aAAa,SAASA,UAAT,GAAsB;AACrC/D,mBAAWgE,QAAX,CAAoBhD,UAAUF,IAA9B,EAAoCC,QAApC,EAA8CkD,IAA9C,CAAmD,UAAUhC,IAAV,EAAgB;AAC/DqB,wBAAYrB,IAAZ;AACH,SAFD;AAGH,KAJD;;AAMA,QAAMiC,aAAa,SAASA,UAAT,GAAsB;AACrCf;;AAEAjD,oBAAYiE,gBAAZ,CAA6B,QAA7B,EAAuC,YAAY;AAC/C,gBAAMC,OAAOlE,YAAYmE,KAAZ,CAAkB,CAAlB,CAAb;;AAEA,gBAAI,CAACD,IAAL,EAAW;AACP;AACH;;AAEDpE,uBAAWsE,OAAX,CAAmBF,IAAnB;AACApE,uBAAWgE,QAAX,CAAoB,CAApB,EAAuBjD,QAAvB,EAAiCkD,IAAjC,CACI,UAAUhC,IAAV,EAAgB;AACZzB,0BAAU+D,WAAV,GAAwBH,KAAKI,IAA7B;;AAEAxD,0BAAU,CAAV;AACAC,yBAASwD,KAAKC,IAAL,CAAUN,KAAKO,IAAL,GAAY7D,IAAtB,IAA8BD,IAAvC;AACA,oBAAGI,SAAS,CAAZ,EAAe;AACXA,6BAAS,CAAT;AACH;;AAEDqC,4BAAYrB,IAAZ;AACH,aAXL,EAWO,UAAU2C,KAAV,EAAiB;AAChBC,wBAAQC,GAAR,CAAYF,KAAZ;AACH,aAbL;AAeH,SAvBD;;AAyBAvE,gBAAQ8D,gBAAR,CAAyB,OAAzB,EAAkC,UAAUY,KAAV,EAAiB;AAC/C;AACA,gBAAIA,MAAMC,MAAN,KAAiB3E,OAArB,EAA8B;AAC1B;AACH;;AAEDe,sBAAU2D,MAAMC,MAAN,CAAaC,EAAvB;AACH,SAPD;;AASA3E,gBAAQ6D,gBAAR,CAAyB,OAAzB,EAAkC,UAAUY,KAAV,EAAiB;AAC/C;AACA,gBAAIA,MAAMC,MAAN,KAAiB1E,OAArB,EAA8B;AAC1B;AACH;;AAEDc,sBAAU2D,MAAMC,MAAN,CAAaC,EAAvB;AACH,SAPD;;AASAxE,oBAAY0D,gBAAZ,CAA6B,OAA7B,EAAsC,YAAW;AAC7C,gBAAGnD,YAAY,CAAf,EAAkB;AACd;AACH;;AAEDA;AACA+C;AACH,SAPD;;AASArD,sBAAcyD,gBAAd,CAA+B,OAA/B,EAAwC,YAAW;AAC/C,gBAAGnD,YAAYC,MAAf,EAAuB;AACnB;AACH;;AAEDD;AACA+C;AACH,SAPD;;AASApD,mBAAWwD,gBAAX,CAA4B,OAA5B,EAAqC,YAAW;AAC5C,gBAAGnD,YAAY,CAAf,EAAkB;AACd;AACH;;AAEDA,uBAAWH,OAAO,CAAlB;AACA,gBAAGG,UAAU,CAAb,EAAgB;AACZA,0BAAU,CAAV;AACH;;AAED+C;AACH,SAXD;;AAaAnD,qBAAauD,gBAAb,CAA8B,OAA9B,EAAuC,YAAW;AAC9C,gBAAGnD,YAAYC,MAAf,EAAuB;AACnB;AACH;;AAEDD,uBAAWH,OAAO,CAAlB;AACA,gBAAGG,UAAUC,MAAb,EAAqB;AACjBD,0BAAUC,MAAV;AACH;;AAED8C;AACH,SAXD;AAcH,KA3FD;;AA6FAG;AACH,CA7OD","file":"main.js","sourcesContent":["requirejs([\"./hexhandler2\"], function (hexHandler) {\r\n    \"use strict\";\r\n    const highlightColor = 'yellow';\r\n\r\n    const fileChooser = document.getElementById('fileChooser');\r\n    const hexView = document.getElementById('hexView');\r\n    const utfView = document.getElementById('utfView');\r\n    const legend = document.getElementById('legend');\r\n    const fileLabel = document.getElementById('fileLabel');\r\n\r\n    const btnScrollUp = document.getElementById('scrollUp');\r\n    const btnScrollDown = document.getElementById('scrollDown');\r\n    const btnChunkUp = document.getElementById('chunkUp');\r\n    const btnChunkDown = document.getElementById('chunkDown');\r\n\r\n    let rows = 20;\r\n    let cols = 20;\r\n    let numBytes = rows * cols;\r\n\r\n    let currRow = 0;\r\n    let maxRow = 0;\r\n\r\n    let highlitSpan = undefined;\r\n\r\n    const highlight = function highlight(spanId) {\r\n        spanId = spanId.substr(1);\r\n\r\n        if (highlitSpan !== undefined) {\r\n            document.getElementById('h' + highlitSpan).style.backgroundColor = hexView.style.backgroundColor;\r\n        }\r\n\r\n        if (highlitSpan !== undefined) {\r\n            document.getElementById('u' + highlitSpan).style.backgroundColor = utfView.style.backgroundColor;\r\n        }\r\n\r\n        document.getElementById('h' + spanId).style.backgroundColor = highlightColor;\r\n        document.getElementById('u' + spanId).style.backgroundColor = highlightColor;\r\n\r\n        highlitSpan = spanId;\r\n    };\r\n\r\n    const generateSpans = function generateSpans(numSpans,\r\n                                                 separator = '',\r\n                                                 breakEvery = -1,\r\n                                                 idNumbering = undefined) {\r\n        let spans = '';\r\n        for (let i = 1; i <= numSpans; i++) {\r\n            spans += '<span';\r\n\r\n            if (idNumbering !== undefined) {\r\n                spans += ` id=\"${idNumbering}${i}\"`;\r\n            }\r\n            spans += '></span>';\r\n\r\n            //We need to manually add breaks because whitespace wraps are disabled in CSS. This is because\r\n            //some of the printed characters also print newlines on Chrome etc and would mess up formatting\r\n            if (breakEvery > 0 && (i % breakEvery === 0)) {\r\n                spans += '<br>';\r\n            } else { // If there's no break, we separate with the separator\r\n                spans += separator;\r\n            }\r\n        }\r\n\r\n        return spans;\r\n    };\r\n\r\n    const generateHexArray = function generateHexArray(data) {\r\n        return Array.prototype.map.call(data, function (datum) {\r\n            let hexArray = datum\r\n                .toString(16)\r\n                .toUpperCase();\r\n\r\n            if (datum < 16) {\r\n                hexArray = '0' + hexArray;\r\n            }\r\n\r\n            return hexArray;\r\n        });\r\n    };\r\n\r\n    const generateUtfArray = function generateUtfArray(data) {\r\n        // All non-printable characters replaced with a '.'\r\n        return String.fromCharCode.apply(null, data)\r\n            .replace(/[\\x00-\\x1F\\x7F-\\xA0\\s]/g, '.')\r\n            .split('');\r\n    };\r\n\r\n    const legendGen = function* legendGen(startingRow) {\r\n        let counter = startingRow;\r\n\r\n        while(true) {\r\n            yield counter++ * cols;\r\n        }\r\n    };\r\n\r\n    const resizeWindows = function resizeWindows() {\r\n        // We use ch (width of '0' char) because we're using a fixed-width font\r\n        hexView.style.width = `${cols * 3}ch`;\r\n        utfView.style.width = `${cols}ch`;\r\n\r\n        hexView.innerHTML = generateSpans(numBytes, ' ', cols, 'h');\r\n        utfView.innerHTML = generateSpans(numBytes, '', cols, 'u');\r\n    };\r\n\r\n    const updateViews = function updateViews(data) {\r\n        const hexIter = generateHexArray(data)[Symbol.iterator]();\r\n        const utfIter = generateUtfArray(data)[Symbol.iterator]();\r\n\r\n        // These work by replacing the inside of each span with the next new value\r\n        hexView.innerHTML = hexView.innerHTML.replace(/\">(?:[0-9A-F]{2})?</g, () => `\">${hexIter.next().value || ''}<`);\r\n\r\n        //Checks for the closing / character in </span> to prevent false positives in case the character is '<'\r\n        utfView.innerHTML = utfView.innerHTML.replace(/\">.?<\\//g, () => `\">${utfIter.next().value || ''}<\\/`);\r\n\r\n        //update scroll bars\r\n        if(currRow === maxRow) {\r\n            btnScrollDown.disabled = true;\r\n            btnChunkDown.disabled = true;\r\n        } else {\r\n            btnScrollDown.disabled = false;\r\n            btnChunkDown.disabled = false;\r\n        }\r\n\r\n        if(currRow === 0) {\r\n            btnScrollUp.disabled = true;\r\n            btnChunkUp.disabled = true;\r\n        } else {\r\n            btnScrollUp.disabled = false;\r\n            btnChunkUp.disabled = false;\r\n        }\r\n\r\n        //update legend\r\n        const gen = legendGen(currRow);\r\n        legend.innerHTML = generateSpans(rows, '', 1, false)\r\n            .replace(/><\\//g, () => `>${gen.next().value}</`);\r\n    };\r\n\r\n    const updateData = function updateData() {\r\n        hexHandler.getBytes(currRow * cols, numBytes).then(function (data) {\r\n            updateViews(data);\r\n        });\r\n    };\r\n\r\n    const initialize = function initialize() {\r\n        resizeWindows();\r\n\r\n        fileChooser.addEventListener('change', function () {\r\n            const file = fileChooser.files[0];\r\n\r\n            if (!file) {\r\n                return;\r\n            }\r\n\r\n            hexHandler.setFile(file);\r\n            hexHandler.getBytes(0, numBytes).then(\r\n                function (data) {\r\n                    fileLabel.textContent = file.name;\r\n\r\n                    currRow = 0;\r\n                    maxRow = Math.ceil(file.size / cols) - rows;\r\n                    if(maxRow < 0) {\r\n                        maxRow = 0;\r\n                    }\r\n\r\n                    updateViews(data);\r\n                }, function (error) {\r\n                    console.log(error);\r\n                }\r\n            );\r\n        });\r\n\r\n        hexView.addEventListener('click', function (event) {\r\n            //don't highlight the entire area\r\n            if (event.target === hexView) {\r\n                return;\r\n            }\r\n\r\n            highlight(event.target.id);\r\n        });\r\n\r\n        utfView.addEventListener('click', function (event) {\r\n            //don't highlight the entire area\r\n            if (event.target === utfView) {\r\n                return;\r\n            }\r\n\r\n            highlight(event.target.id);\r\n        });\r\n\r\n        btnScrollUp.addEventListener('click', function() {\r\n            if(currRow === 0) {\r\n                return;\r\n            }\r\n\r\n            currRow--;\r\n            updateData();\r\n        });\r\n\r\n        btnScrollDown.addEventListener('click', function() {\r\n            if(currRow === maxRow) {\r\n                return;\r\n            }\r\n\r\n            currRow++;\r\n            updateData();\r\n        });\r\n\r\n        btnChunkUp.addEventListener('click', function() {\r\n            if(currRow === 0) {\r\n                return;\r\n            }\r\n\r\n            currRow -= rows - 1;\r\n            if(currRow < 0) {\r\n                currRow = 0;\r\n            }\r\n\r\n            updateData();\r\n        });\r\n\r\n        btnChunkDown.addEventListener('click', function() {\r\n            if(currRow === maxRow) {\r\n                return;\r\n            }\r\n\r\n            currRow += rows - 1;\r\n            if(currRow > maxRow) {\r\n                currRow = maxRow;\r\n            }\r\n\r\n            updateData();\r\n        });\r\n\r\n\r\n    };\r\n\r\n    initialize();\r\n});\r\n\r\n"]}
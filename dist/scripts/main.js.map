{"version":3,"sources":["../../scripts/main.js"],"names":["requirejs","hexHandler","highlightColor","fileChooser","document","getElementById","hexView","utfView","legend","fileLabel","rows","cols","numBytes","hexHighlit","undefined","utfHighlit","highlight","spanId","style","backgroundColor","getElementsByClassName","generateSpans","numSpans","separator","breakEvery","classNumbering","spans","i","generateHexArray","data","Array","prototype","map","call","datum","hexArray","toString","toUpperCase","generateUtfArray","String","fromCharCode","apply","replace","split","initialize","resizeWindows","legendGen","startingRow","counter","width","innerHTML","gen","next","value","updateViews","hexIter","Symbol","iterator","utfIter","addEventListener","file","files","setFile","getBytes","then","textContent","name","error","console","log","event","target","classList"],"mappings":"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","file":"main.js","sourcesContent":["requirejs([\"./hexhandler2\"], function (hexHandler) {\r\n    \"use strict\";\r\n    const highlightColor = 'yellow';\r\n\r\n    const fileChooser = document.getElementById('fileChooser');\r\n    const hexView = document.getElementById('hexView');\r\n    const utfView = document.getElementById('utfView');\r\n    const legend = document.getElementById('legend');\r\n    const fileLabel = document.getElementById('fileLabel');\r\n\r\n    let rows = 20;\r\n    let cols = 20;\r\n    let numBytes = rows * cols;\r\n\r\n    let hexHighlit = undefined;\r\n    let utfHighlit = undefined;\r\n\r\n    const highlight = function highlight(spanId) {\r\n        if (hexHighlit !== undefined) {\r\n            hexHighlit.style.backgroundColor = hexView.style.backgroundColor;\r\n        }\r\n\r\n        if (utfHighlit !== undefined) {\r\n            utfHighlit.style.backgroundColor = utfView.style.backgroundColor;\r\n        }\r\n\r\n        hexHighlit = hexView.getElementsByClassName(spanId)[0];\r\n        hexHighlit.style.backgroundColor = highlightColor;\r\n\r\n        utfHighlit = utfView.getElementsByClassName(spanId)[0];\r\n        utfHighlit.style.backgroundColor = highlightColor;\r\n    };\r\n\r\n    const generateSpans = function generateSpans(numSpans,\r\n                                                 separator = '',\r\n                                                 breakEvery = -1,\r\n                                                 classNumbering = true) {\r\n        let spans = '';\r\n        for (let i = 1; i <= numSpans; i++) {\r\n            spans += '<span';\r\n\r\n            if (classNumbering) {\r\n                spans += ` class=\"${i}\"`;\r\n            }\r\n            spans += '></span>';\r\n\r\n            //We need to manually add breaks because whitespace wraps are disabled in CSS. This is because\r\n            //some of the printed characters also print newlines on Chrome etc and would mess up formatting\r\n            if (breakEvery > 0 && (i % breakEvery === 0)) {\r\n                spans += '<br>';\r\n            } else { // If there's no break, we separate with the separator\r\n                spans += separator;\r\n            }\r\n        }\r\n\r\n        return spans;\r\n    };\r\n\r\n    const generateHexArray = function generateHexArray(data) {\r\n        return Array.prototype.map.call(data, function (datum) {\r\n            let hexArray = datum\r\n                .toString(16)\r\n                .toUpperCase();\r\n\r\n            if (datum < 16) {\r\n                hexArray = '0' + hexArray;\r\n            }\r\n\r\n            return hexArray;\r\n        });\r\n    };\r\n\r\n    const generateUtfArray = function generateUtfArray(data) {\r\n        // All non-printable characters replaced with a '.'\r\n        return String.fromCharCode.apply(null, data)\r\n            .replace(/[\\x00-\\x1F\\x7F-\\xA0\\s]/g, '.')\r\n            .split('');\r\n    };\r\n\r\n    const initialize = function initialize() {\r\n        resizeWindows();\r\n    };\r\n\r\n    const legendGen = function *legendGen(startingRow) {\r\n        let counter = startingRow;\r\n\r\n        while(true)\r\n            yield counter++ * cols;\r\n    };\r\n\r\n    const resizeWindows = function resizeWindows() {\r\n        // We use ch (width of 0) because we're using a fixed-width font\r\n        hexView.style.width = `${cols * 3}ch`;\r\n        utfView.style.width = `${cols}ch`;\r\n\r\n        hexView.innerHTML = generateSpans(numBytes, ' ', cols);\r\n        utfView.innerHTML = generateSpans(numBytes, '', cols);\r\n\r\n        const gen = legendGen(0);\r\n        legend.innerHTML = generateSpans(rows, '', 1, false)\r\n            .replace(/><\\//g, () => `>${gen.next().value}</`);\r\n    };\r\n\r\n    const updateViews = function updateViews(data) {\r\n        const hexIter = generateHexArray(data)[Symbol.iterator]();\r\n        const utfIter = generateUtfArray(data)[Symbol.iterator]();\r\n\r\n        // This works by replacing the inside of each span with\r\n        hexView.innerHTML = hexView.innerHTML.replace(/\"></g, () => `\">${hexIter.next().value}<`);\r\n        utfView.innerHTML = utfView.innerHTML.replace(/\"></g, () => `\">${utfIter.next().value}<`);\r\n    };\r\n\r\n    fileChooser.addEventListener('change', function () {\r\n        const file = fileChooser.files[0];\r\n\r\n        if (!file) {\r\n            return;\r\n        }\r\n\r\n        hexHandler.setFile(file);\r\n        hexHandler.getBytes(0, numBytes).then(\r\n            function (data) {\r\n                updateViews(data);\r\n                fileLabel.textContent = file.name;\r\n            }, function (error) {\r\n                console.log(error);\r\n            }\r\n        );\r\n    });\r\n\r\n    hexView.addEventListener('click', function (event) {\r\n        //don't highlight the entire area\r\n        if (event.target === hexView) {\r\n            return;\r\n        }\r\n\r\n        highlight(event.target.classList[0]);\r\n    });\r\n\r\n    utfView.addEventListener('click', function (event) {\r\n        //don't highlight the entire area\r\n        if (event.target === utfView) {\r\n            return;\r\n        }\r\n\r\n        highlight(event.target.classList[0]);\r\n    });\r\n\r\n    initialize();\r\n});\r\n\r\n"]}
{"version":3,"sources":["../../scripts/hexhandler2.js"],"names":["define","handler","reader","FileReader","fileRef","setFile","file","getBytes","offset","size","Promise","resolve","reject","undefined","Number","isNaN","parseFloat","isFinite","readAsArrayBuffer","slice","onload","Uint8Array","result","onerror","error"],"mappings":";;AAAA;;AAEAA,OAAO,YAAY;AACf;;AACA,QAAMC,UAAU,EAAhB;AACA,QAAMC,SAAS,IAAIC,UAAJ,EAAf;;AAEA,QAAIC,gBAAJ;;AAEAH,YAAQI,OAAR,GAAkB,UAAUC,IAAV,EAAgB;AAC9BF,kBAAUE,IAAV;AACH,KAFD;;AAIAL,YAAQM,QAAR,GAAmB,UAAUC,MAAV,EAAkBC,IAAlB,EAAwB;AACvC,eAAO,IAAIC,OAAJ,CACH,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AACvB,gBAAIR,YAAYS,SAAhB,EAA2B;AACvBD,uBAAO,2BAAP;AACA;AACH;;AAED,gBAAIE,OAAOC,KAAP,CAAaC,WAAWR,MAAX,CAAb,KAAoC,CAACS,SAAST,MAAT,CAAzC,EAA2D;AACvDI,uBAAO,iBAAP;AACA;AACH;;AAEDV,mBAAOgB,iBAAP,CAAyBd,QAAQe,KAAR,CAAcX,MAAd,EAAsBA,SAASC,IAA/B,CAAzB;;AAEAP,mBAAOkB,MAAP,GAAgB,YAAY;AACxBT,wBAAQ,IAAIU,UAAJ,CAAenB,OAAOoB,MAAtB,CAAR;AACH,aAFD;;AAIApB,mBAAOqB,OAAP,GAAiB,YAAW;AACxBX,uBAAOV,OAAOsB,KAAd;AACH,aAFD;AAGH,SArBE,CAAP;AAuBH,KAxBD;;AA0BA,WAAOvB,OAAP;AACH,CAtCD","file":"hexhandler2.js","sourcesContent":["//hexHandler returning a promise\r\n\r\ndefine(function () {\r\n    \"use strict\";\r\n    const handler = {};\r\n    const reader = new FileReader();\r\n\r\n    let fileRef;\r\n\r\n    handler.setFile = function (file) {\r\n        fileRef = file;\r\n    };\r\n\r\n    handler.getBytes = function (offset, size) {\r\n        return new Promise(\r\n            function (resolve, reject) {\r\n                if (fileRef === undefined) {\r\n                    reject(\"File reference undefined.\");\r\n                    return;\r\n                }\r\n\r\n                if (Number.isNaN(parseFloat(offset)) || !isFinite(offset)) {\r\n                    reject(\"Invalid offset.\");\r\n                    return;\r\n                }\r\n\r\n                reader.readAsArrayBuffer(fileRef.slice(offset, offset + size));\r\n\r\n                reader.onload = function () {\r\n                    resolve(new Uint8Array(reader.result));\r\n                };\r\n\r\n                reader.onerror = function() {\r\n                    reject(reader.error);\r\n                };\r\n            }\r\n        );\r\n    };\r\n\r\n    return handler;\r\n});"]}